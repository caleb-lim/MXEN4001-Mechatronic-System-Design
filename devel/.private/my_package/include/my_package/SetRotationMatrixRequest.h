// Generated by gencpp from file my_package/SetRotationMatrixRequest.msg
// DO NOT EDIT!


#ifndef MY_PACKAGE_MESSAGE_SETROTATIONMATRIXREQUEST_H
#define MY_PACKAGE_MESSAGE_SETROTATIONMATRIXREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_package
{
template <class ContainerAllocator>
struct SetRotationMatrixRequest_
{
  typedef SetRotationMatrixRequest_<ContainerAllocator> Type;

  SetRotationMatrixRequest_()
    : r11(0.0)
    , r12(0.0)
    , r13(0.0)
    , r21(0.0)
    , r22(0.0)
    , r23(0.0)
    , r31(0.0)
    , r32(0.0)
    , r33(0.0)  {
    }
  SetRotationMatrixRequest_(const ContainerAllocator& _alloc)
    : r11(0.0)
    , r12(0.0)
    , r13(0.0)
    , r21(0.0)
    , r22(0.0)
    , r23(0.0)
    , r31(0.0)
    , r32(0.0)
    , r33(0.0)  {
  (void)_alloc;
    }



   typedef float _r11_type;
  _r11_type r11;

   typedef float _r12_type;
  _r12_type r12;

   typedef float _r13_type;
  _r13_type r13;

   typedef float _r21_type;
  _r21_type r21;

   typedef float _r22_type;
  _r22_type r22;

   typedef float _r23_type;
  _r23_type r23;

   typedef float _r31_type;
  _r31_type r31;

   typedef float _r32_type;
  _r32_type r32;

   typedef float _r33_type;
  _r33_type r33;





  typedef boost::shared_ptr< ::my_package::SetRotationMatrixRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_package::SetRotationMatrixRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetRotationMatrixRequest_

typedef ::my_package::SetRotationMatrixRequest_<std::allocator<void> > SetRotationMatrixRequest;

typedef boost::shared_ptr< ::my_package::SetRotationMatrixRequest > SetRotationMatrixRequestPtr;
typedef boost::shared_ptr< ::my_package::SetRotationMatrixRequest const> SetRotationMatrixRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_package::SetRotationMatrixRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_package::SetRotationMatrixRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_package::SetRotationMatrixRequest_<ContainerAllocator1> & lhs, const ::my_package::SetRotationMatrixRequest_<ContainerAllocator2> & rhs)
{
  return lhs.r11 == rhs.r11 &&
    lhs.r12 == rhs.r12 &&
    lhs.r13 == rhs.r13 &&
    lhs.r21 == rhs.r21 &&
    lhs.r22 == rhs.r22 &&
    lhs.r23 == rhs.r23 &&
    lhs.r31 == rhs.r31 &&
    lhs.r32 == rhs.r32 &&
    lhs.r33 == rhs.r33;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_package::SetRotationMatrixRequest_<ContainerAllocator1> & lhs, const ::my_package::SetRotationMatrixRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_package::SetRotationMatrixRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_package::SetRotationMatrixRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_package::SetRotationMatrixRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_package::SetRotationMatrixRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_package::SetRotationMatrixRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_package::SetRotationMatrixRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_package::SetRotationMatrixRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c470553b4922c2811589e9927ace9b4e";
  }

  static const char* value(const ::my_package::SetRotationMatrixRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc470553b4922c281ULL;
  static const uint64_t static_value2 = 0x1589e9927ace9b4eULL;
};

template<class ContainerAllocator>
struct DataType< ::my_package::SetRotationMatrixRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_package/SetRotationMatrixRequest";
  }

  static const char* value(const ::my_package::SetRotationMatrixRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_package::SetRotationMatrixRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 r11\n"
"float32 r12\n"
"float32 r13\n"
"float32 r21\n"
"float32 r22\n"
"float32 r23\n"
"float32 r31\n"
"float32 r32\n"
"float32 r33\n"
;
  }

  static const char* value(const ::my_package::SetRotationMatrixRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_package::SetRotationMatrixRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r11);
      stream.next(m.r12);
      stream.next(m.r13);
      stream.next(m.r21);
      stream.next(m.r22);
      stream.next(m.r23);
      stream.next(m.r31);
      stream.next(m.r32);
      stream.next(m.r33);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetRotationMatrixRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_package::SetRotationMatrixRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_package::SetRotationMatrixRequest_<ContainerAllocator>& v)
  {
    s << indent << "r11: ";
    Printer<float>::stream(s, indent + "  ", v.r11);
    s << indent << "r12: ";
    Printer<float>::stream(s, indent + "  ", v.r12);
    s << indent << "r13: ";
    Printer<float>::stream(s, indent + "  ", v.r13);
    s << indent << "r21: ";
    Printer<float>::stream(s, indent + "  ", v.r21);
    s << indent << "r22: ";
    Printer<float>::stream(s, indent + "  ", v.r22);
    s << indent << "r23: ";
    Printer<float>::stream(s, indent + "  ", v.r23);
    s << indent << "r31: ";
    Printer<float>::stream(s, indent + "  ", v.r31);
    s << indent << "r32: ";
    Printer<float>::stream(s, indent + "  ", v.r32);
    s << indent << "r33: ";
    Printer<float>::stream(s, indent + "  ", v.r33);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_PACKAGE_MESSAGE_SETROTATIONMATRIXREQUEST_H
